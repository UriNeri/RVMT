#!/usr/bin/perl5.16

############################################################
#	Template:	1.5, August 09, 2018
#	Parent Path:	/home/wolf/bin on frosty
############################################################

############################################################
#	System etc
############################################################
use lib "/home/wolf/perl5/lib/perl5";
use YIW::basic;
use YIW::tree;
# uncomment the next line if better randomness is important
# use Math::Random::MT qw/rand srand/;

our $Pver = "0.1";
our $Pdat = "Xxx 00 2021";

our ($Pnam) = ($0 =~ m/([^\/]+)$/);
our ($Path) = ($0 =~ m/^(.+)\/[^\/]+$/);$Path = "." unless($Path);

our $Ppid = $$;	# Process ID
our $Base = "tmp.$Pnam.$Ppid";
{
 my ($host) = ($ENV{"HOSTNAME"} =~ m/^(\w+)/);
 my $salt = sprintf ".%s.%03d",$host,int(rand(1000));
 $Base .= $salt;
}
our $CMD = "";
our $DEBUG = 0;
our $VERBOSE = 1;
our $DOIT = 1;
our $EXITCODE = 0;

############################################################
#	Definitions
############################################################
my $ftax = "ETAOIN SHRDLU";
my $ftre = "ETAOIN SHRDLU";
my $tlev = 1;

############################################################
#	Global variables
############################################################
my %ttab;
my %tcnt;			# known taxon -> assigned count
my %tlca;			# known taxon -> LCA node

############################################################
#	Instructions etc
############################################################
$Instructions = <<EOINPUT;

$Path/$Pnam $Pver, $Pdat

Use: $Pnam taxtab -l=n -t= tree [options]

Options:

	-l=n		taxon level (default $tlev)

	-t=tree		newick tree file (MANDATORY)
EOINPUT

############################################################
#	code start
############################################################

#---	get and process arguments --------------------------
YIW::basic::my_args(\@ARGV,1);					# pass 0 to block STDIN
!@myGlobList and print $Instructions and exit 0;

if(exists $myOptList{"DEBUG"}){ 					# hidden common option
 $DEBUG = 1;
 $VERBOSE = 0x7fff;
}
$VERBOSE = int $myOptList{"VERB"} if(exists $myOptList{"VERB"});	# hidden common option
$DOIT = 0 if(exists $myOptList{"IDLE"});				# hidden common option
$Base = $myOptList{"BASE"} if($myOptList{"BASE"} ne "");		# hidden common option

# examples for using options:
# $opts = 1 if(exists $myOptList{"q"});				# on/off
# $opti = int $myOptList{"i"} if(int $myOptList{"i"}>0);	# positive integer
# $opti = int $myOptList{"i"} if(exists $myOptList{"i"});	# any integer <- string
# $optr = $myOptList{"x"} + 0 if($myOptList{"x"}>0);		# positive real
# $optl = $myOptList{"l"} if($myOptList{"l"} ne "");		# non-empty string
# $optx = "0" if($optx==0);					# to be passed in command line
$tlev = int $myOptList{"l"} if(int $myOptList{"l"}>0);
$ftre = $myOptList{"t"} if($myOptList{"t"} ne "");

my $ftax = shift @myGlobList;

#---	rest of the code -----------------------------------
# $CMD = ""; print STDERR "$Pnam:\t[ $CMD ]\n" if($VERBOSE); $EXITCODE = system $CMD if($DOIT); die "$Pnam:\t[ $CMD ] failed with [ $EXITCODE ]" if($EXITCODE!=0);
#
# foreach my $xarg (@myGlobList){
#  my @xglo = glob $xarg;
#  foreach my $name (@xglo){
#  }
# }
#
# print STDERR "$Pnam:\tReading $dlst/$core.$clst\n" if($VERBOSE);
# open HAND,"<$dlst/$core.$clst" or die "$Pnam:\tCan't read \"$dlst/$core.$clst\"";
# while(<HAND>){
#  chomp;
# }
# close HAND;
# printf STDERR "$Pnam:\t\t%s\tgenomes\n",int_commify(scalar @glist) if($VERBOSE);
#
# log_this_point($Pnam,"$Pnam\t$Ppid","started") if($VERBOSE>1);

#---	read taxa ------------------------------------------
print STDERR "$Pnam:\tReading $ftax\n" if($VERBOSE);
open HAND,"<$ftax" or die "$Pnam:\tCan't read \"$ftax\"";
while(<HAND>){
 chomp;
 my ($id,@data) = split/\t/;
 next if($data[$tlev-1] eq "");
 $ttab{$id} = $data[$tlev-1];
 $tcnt{$data[$tlev-1]}++;
}
close HAND;
printf STDERR "$Pnam:\t\t%s\tIDs\n",int_commify(scalar keys %ttab) if($VERBOSE);
printf STDERR "$Pnam:\t\t%s\ttaxa\n",int_commify(scalar keys %tcnt) if($VERBOSE);

#---	read tree ------------------------------------------
print STDERR "$Pnam:\tReading $ftre\n" if($VERBOSE);
$root = read_newick("$ftre",0);

my @lnod; my @llea;
list_tree_nodes($root,\@lnod,\@llea);

tree_leaf_sets($root);

label_tree($root,0);

printf STDERR "$Pnam:\t\t%s\tleaves\n",int_commify(scalar @llea) if($VERBOSE);

#---	taxa stats -----------------------------------------
tree_collect_taxa($root);

my $rtax = $$root{"taxa"};
%tcnt = %$rtax;
printf STDERR "$Pnam:\t\t%s\ttaxa at the root\n",int_commify(scalar keys %tcnt) if($VERBOSE);

	#print "\n";
	#print_tree($root,0);
	#exit;


#---	taxa best locations --------------------------------
tree_locate_taxa($root);

#---	clean ----------------------------------------------
#unlink <$Base.*> unless($DEBUG);

############################################################
#	tree_collect_taxa($rnod)
############################################################
sub tree_collect_taxa
{
 my $rnod = shift;

 my %tset = ();
 
 my $rdes = $$rnod{"d"};

 if($rdes eq ""){					# leaf
  my $id = $$rnod{"n"};
  my $tx = $ttab{$id};
  $tset{$tx} = 1 if($tx ne "");
 }
 
 for(my $i=0;$i<@$rdes;$i++){				# scan descendants
  my $rden = $$rdes[$i];
  tree_collect_taxa($rden);
  my $rtax = $$rden{"taxa"};
  foreach my $tx (keys %$rtax){
   $tset{$tx} += $$rtax{$tx};
  }
 }

 $$rnod{"taxa"} = \%tset;
}

############################################################
#	print_tree($rnod,$level)
############################################################
# not used - debugging procedure
sub print_tree
{
 my $rnod = shift;
 my $level = shift;
 
 my $blen = $$rnod{"l"};
 my $name = $$rnod{"n"};
 my $rdes = $$rnod{"d"};
 if($name ne ""){
  for(my $i=0;$i<$level;$i++){ print "\t";} print "$name\n";
 }else{
  for(my $i=0;$i<$level;$i++){ print "\t";} print "INTERNAL\n";
 }
 for(my $i=0;$i<$level;$i++){ print "\t";} printf "L= %.4f\n",$blen;
 for(my $i=0;$i<$level;$i++){ print "\t";} printf "D= %.4f\n",$$rnod{"deep"};
 my $rset = $$rnod{"snod"};
 for(my $i=0;$i<$level;$i++){ print "\t";} printf "N= %D\n",(scalar keys %$rset);
 my $rtax = $$rnod{"taxa"};
 for(my $i=0;$i<$level;$i++){ print "\t";} printf "T= %D\n",(scalar keys %$rtax);
 #foreach my $tx (sort keys %$rtax){
 # for(my $i=0;$i<$level;$i++){ print "\t";} printf "T:[%s]:%d\t%s\n",$tx,$$rtax{$tx};
 #}
 
 for(my $i=0;$i<@$rdes;$i++){ print_tree($$rdes[$i],$level+1);}
}

############################################################
#	tree_locate_taxa($rnod)
############################################################
sub tree_locate_taxa
{
 my $rnod = shift;

 my $rdes = $$rnod{"d"};

 my $rtax = $$rnod{"taxa"};
 
 foreach my $tx (keys %$rtax){				# scan all taxa here
  next if($tlca{$tx} ne "");					# LCA already detected
  my $ndbr = 0;							# descending branches with THIS taxon
  for(my $i=0;$i<@$rdes;$i++){					# scan descendants
   my $rden = $$rdes[$i];
   my $rtad = $$rden{"taxa"};
   $ndbr++ if($$rtad{$tx}>0);
  }
  next if($ndbr<=1 and @$rdes>0);				# only one descendant; not an LCA
  $tlca{$tx} = $rnod;						# HERE is the LCA for THIS taxon
  my $name = $$rnod{"n"};
  $name = $$rnod{"lab"} if($name eq "");
  printf "%s\t%s\n",$name,$tx;
 }

 for(my $i=0;$i<@$rdes;$i++){				# scan descendants
  my $rden = $$rdes[$i];
  tree_locate_taxa($rden);
 }

}

