#!/usr/bin/perl5.16

############################################################
#	Template:	1.5, July 16, 2017
#	Parent Path:	/home/wolf/bin on frosty
############################################################

############################################################
#	System etc
############################################################
use lib "/home/wolf/perl5/lib/perl5";
use YIW::basic;
# uncomment the next line if better randomness is important
# use Math::Random::MT qw/rand srand/;

our $Pver = "1.0";
our $Pdat = "September 25 2020";

our ($Pnam) = ($0 =~ m/([^\/]+)$/);
our ($Path) = ($0 =~ m/^(.+)\/[^\/]+$/);$Path = "." unless($Path);

our $Ppid = $$;	# Process ID
our $Base = "tmp.$Pnam.$Ppid";
{
 my ($host) = ($ENV{"HOSTNAME"} =~ m/^(\w+)/);
 my $salt = sprintf ".%s.%03d",$host,int(rand(1000));
 $Base .= $salt;
}
our $CMD = "";
our $DEBUG = 0;
our $VERBOSE = 1;
our $DOIT = 1;
############################################################
#	Definitions
############################################################
my $HISTOP = 1e300;
my $higd = 0;
my $metn = 0;
my @metl = ("average", "mcquitty", "single", "complete", "median", "centroid", "ward.D", "ward.D2");
my $meth = "";
my $Rpro = "/home/wolf/bin/R/run_hclust-R";

############################################################
#	Global variables
############################################################
my %lobj;
my @objl;

############################################################
#	Instructions etc
############################################################
$Instructions = <<EOINPUT;

$Path/$Pnam $Pver, $Pdat

Use: $Pnam name [options]

Hierarchical clustering using R hclust

Input: <objA> <objB> <distance> or <objX>

Options:

	-m=n		clustering mode n
			0 - UPGMA (default)
			1 - WPGMA
			2 - single
			3 - complete
			4 - median
			5 - centroid
			6 - ward.D
			7 - ward.D2

	-dmax=x		distance for non-observed pairs (default empyrical)
Requirements:

	R, $Rpro
EOINPUT

############################################################
#	code start
############################################################

#---	get and process arguments --------------------------
YIW::basic::my_args(\@ARGV,1);					# pass 0 to block STDIN
!@myGlobList and print $Instructions and exit 0;

if(exists $myOptList{"DEBUG"}){ 					# hidden common option
 $DEBUG = 1;
 $VERBOSE = 0x7fff;
}
$VERBOSE = int $myOptList{"VERB"} if(exists $myOptList{"VERB"});	# hidden common option
$DOIT = 0 if(exists $myOptList{"IDLE"});				# hidden common option
$Base = $myOptList{"BASE"} if($myOptList{"BASE"} ne "");		# hidden common option
if((lc $Base) eq "safe"){						# slow but safe
 while(1){
  my $bnum = int(rand(0x7fffffff));
  $Base = "tmp.$Pnam.$bnum";
  last if((glob "$Base.*")==0);
 }
}
# examples for using options:
# $opts = 1 if(exists $myOptList{"q"});				# on/off
# $opti = int $myOptList{"i"} if(int $myOptList{"i"}>0);	# positive integer
# $opti = int $myOptList{"i"} if(exists $myOptList{"i"});	# any integer <- string
# $optr = $myOptList{"x"} + 0 if($myOptList{"x"}>0);		# positive real
# $optl = $myOptList{"l"} if($myOptList{"l"} ne "");		# non-empty string
# $optx = "0" if($optx==0);					# to be passed in command line
$metn = int $myOptList{"m"} if(exists $myOptList{"m"});
$ment = 0 if($metn<0 or $metn>=@metl);
$meth = $metl[$metn];
$higd = $myOptList{"dmax"} + 0 if($myOptList{"dmax"}>0);
# my $name = shift @myGlobList;

#---	rest of the code -----------------------------------
# $CMD = ""; print STDERR "$Pnam:\t[ $CMD ]\n" if($VERBOSE); system $CMD if($DOIT);
#
# foreach my $xarg (@myGlobList){
#  my @xglo = glob $xarg;
#  foreach my $name (@xglo){
#  }
# }
#
# print STDERR "$Pnam:\tReading $dlst/$core.$clst\n" if($VERBOSE);
# open HAND,"<$dlst/$core.$clst" or die "$Pnam:\tCan't read \"$dlst/$core.$clst\"";
# while(<HAND>){
#  chomp;
# }
# close HAND;
# printf STDERR "$Pnam:\t\t%s\tgenomes\n",int_commify(scalar @glist) if($VERBOSE);

#---	read and transform ---------------------------------
my $nobj = 1;
my $maxd = 0;
open HANX,">$Base.dat" or die "$Pnam:\tCan't write \"$Base.dat\"";
foreach my $xarg (@myGlobList){
 my @xglo = glob $xarg;
 foreach my $name (@xglo){
  print STDERR "$Pnam:\tReading $name\n" if($VERBOSE);
  open HAND,"<$name" or die "$Pnam:\tCan't read \"$name\"";
  while(<HAND>){
   chomp;
   my ($x1,$x2,$dd) = split/\t/;
   next if($x1 eq "");
   if($lobj{$x1} eq ""){ $lobj{$x1} = $nobj; $nobj++;}
   next if($x2 eq "");
   if($lobj{$x2} eq ""){ $lobj{$x2} = $nobj; $nobj++;}
   my $n1 = $lobj{$x1};
   my $n2 = $lobj{$x2};
   $dd = 0 if($dd<=0);
   $dd /= 2;				# adjust for hclust() doubling the altitudes
   printf HANX "%d\t%d\t%s\n",$n1,$n2,$dd;
   $maxd = $dd if($dd>$maxd);
  }
  close HAND;
 }
}
close HANX;
$nobj--;
printf STDERR "$Pnam:\t\t%s\tobjects\n",int_commify($nobj) if($VERBOSE);
printf STDERR "$Pnam:\t\t%s\tmax distance\n",$maxd*2 if($VERBOSE);
@objl = sort {$lobj{$a}<=>$lobj{$b}} keys %lobj;

#---	check, adapt ---------------------------------------
if($nobj<=1){				# do not call hclust()
 printf "%s;\n",$objl[0] if($nobj==1);
 unlink <$Base.*> unless($DEBUG);
 exit;
}

#---	adjust limits --------------------------------------
my $limd = $maxd + log(2)/2;		# implies half as similar as the longest observed distance
$limd = $higd/2 if($higd/2>$limd);
$limd = $HISTOP if($limd<=0);

#---	run ------------------------------------------------
$CMD = "Rscript --vanilla $Rpro $nobj $limd $Base.dat $Base.tre.tab $Base.tre.lst $meth"; print STDERR "$Pnam:\t[ $CMD ]\n" if($VERBOSE); system $CMD if($DOIT);

#---	read altitudes -------------------------------------
my @nalt = ();
print STDERR "$Pnam:\tReading $Base.tre.lst\n" if($VERBOSE);
open HAND,"<$Base.tre.lst" or die "$Pnam:\tCan't read \"$Base.tre.lst\"";
while(<HAND>){
 chomp;
 push @nalt,($_+0);
}
close HAND;
printf STDERR "$Pnam:\t\t%s\tnodes\n",int_commify(scalar @nalt) if($VERBOSE);

#---	read tree structure --------------------------------
my @nnod = ();
my $curn = 0;
print STDERR "$Pnam:\tReading $Base.tre.tab\n" if($VERBOSE);
open HAND,"<$Base.tre.tab" or die "$Pnam:\tCan't read \"$Base.tre.tab\"";
while(<HAND>){
 chomp;
 my ($x1,$x2) = split/\s+/;
 my $cura = $nalt[$curn];
 my ($n1,$n2,$a1,$a2) = ();
 if($x1<0){				# refers to leaf
  $n1 = $objl[-$x1-1];
  $a1 = 0;
 }else{					# refers to previous node
  $n1 = $nnod[$x1-1];
  $a1 = $nalt[$x1-1];
 }
 if($x2<0){				# refers to leaf
  $n2 = $objl[-$x2-1];
  $a2 = 0;
 }else{					# refers to previous node
  $n2 = $nnod[$x2-1];
  $a2 = $nalt[$x2-1];
 }
 my $l1 = $cura - $a1;
 my $l2 = $cura - $a2;
 $nnod[$curn] = "(".$n1.":".$l1.",".$n2.":".$l2.")";
 	#printf "[%d]\t%d\t%d\t%.4f\t%s\t%s\t[%s]\n",$curn,$x1,$x2,$cura,$n1,$n2,$nnod[$curn];
 $curn++;
}
close HAND;
printf STDERR "$Pnam:\t\t%s\tnodes\n",int_commify(scalar @nnod) if($VERBOSE);

printf "%s;\n",$nnod[@nndo-1];

#---	clean ----------------------------------------------
unlink <$Base.*> unless($DEBUG);

############################################################
#	template_function($xxxx)
############################################################
#sub template_function
#{
# my $xxxx = shift;
#}
