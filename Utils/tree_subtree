#!/usr/bin/perl5.16

############################################################
#	Template:	0.3, November 04 2004
#	Parent Path:	/net/gloin/export/home/wolf/bin/???
############################################################

############################################################
#	System etc
############################################################
$Pver = "0.4";
$Pdat = "January 22, 2015";

($Pnam) = ($0 =~ m/([^\/]+)$/);
($Path) = ($0 =~ m/^(.+)\/[^\/]+$/);$Path = "." unless($Path);

$PID = $$;	# Process ID
############################################################
#	Definitions
############################################################
$idwrd = 0;
$delim = "[ ,;:|]";
$flagl = 0;
$flagh = 0;
$flagp = 1;
$flst = "ETAOIN.SHRDLU";

############################################################
#	Global variables
############################################################
%snod;

############################################################
#	Instructions etc
############################################################
$Instructions = <<EOINPUT;

$Pnam $Pver, $Pdat

$Pnam trefile [options]

Reads trees in Newick format; outputs the sorted subtree spanning
the list of nodes.

Options:

	-w=n		process names of tree leaves (word n) 

	-l=flist	file with list of nodes

	-whole		write tree with original leaf names
EOINPUT

############################################################
#	code start
############################################################

#---	get and process arguments --------------------------
my_args(@ARGV);
!@myGlobList and print $Instructions and exit 0;

$idwrd = int $myOptList{"w"} if(exists $myOptList{"w"});
$flst = $myOptList{"t"} if($myOptList{"t"} ne "");	# backup option
$flst = $myOptList{"l"} if($myOptList{"l"} ne "");
$flagp = 0 if(exists $myOptList{"whole"});

$ftre = shift @myGlobList;

print STDERR "Reading list: $flst\n";
open HAND,"<$flst" or die "Can't read \"$flst\"";
while(<HAND>){
 chomp;
 my ($nod) = split/\s+/;
 $snod{$nod} = 1;
}
close HAND;

print STDERR "Reading tree: $ftre\n";
my $root= read_tree($ftre);

#print STDERR "Sorting tree: $ftre\n";
#sort_tree($root);
 	#print_tree($root,0);
 	#print "\n\n\n";

print STDERR "Pruning tree: $ftre\n";
my $rnew = select_subtree($root,\%snod);
#make_unrooted($rnew);

$flagp |= 0x02;
if($$rnew{"Y"}>0){
 write_tree($rnew,"-",$flagp);
}else{
 print STDERR "\tempty\n";
}

############################################################
#	select_subtree($root,\%snod)
############################################################
sub select_subtree
{
 my $rroo = shift;
 my $rlst = shift;
 
 trace_subtree_rec($rroo,$rlst);	# mark nodes at {"Y"}
 prune_subtree_rec($rroo);		# cut empty branches
 distance_subtree_rec($rroo);		# recompute distances
 return short_subtree_rec($rroo);	# short-circuit unbranched nodes
}

############################################################
#	trace_subtree_rec($root,\%snod)
############################################################
sub trace_subtree_rec
{
 my $rnod = shift;
 my $rlst = shift;
 my $rdes = $$rnod{"d"};
 
 $$rnod{"Y"} = 0;
 
 if(@$rdes){				# internal node
  for(my $i=0;$i<@$rdes;$i++){
   $$rnod{"Y"} += trace_subtree_rec($$rdes[$i],$rlst);
  }
 }else{					# terminal node
  my $name = $$rnod{"n"};
  $name = (split/$delim/,$name)[$idwrd-1] if($idwrd>0);
  $$rnod{"Y"} = 1 if($$rlst{$name});		# in the list
 }

 return $$rnod{"Y"};
}

############################################################
#	prune_subtree_rec($root)
############################################################
sub prune_subtree_rec
{
 my $rnod = shift;
 my $rdes = $$rnod{"d"};
 
 return unless($$rnod{"Y"});		# shouldn't happen
 
 return unless(@$rdes);			# terminal node node

 for(my $i=0;$i<@$rdes;$i++){
  my $rnxt = $$rdes[$i];
  if($$rnxt{"Y"}){ prune_subtree_rec($rnxt);}	# take the path
  else{ $$rdes[$i] = "";}			# prune the branch
 }
}

############################################################
#	distance_subtree_rec($root)
############################################################
sub distance_subtree_rec
{
 my $rnod = shift;
 my $rdes = $$rnod{"d"};

 my $nval = 0;
 for(my $i=0;$i<@$rdes;$i++){
  next if($$rdes[$i] eq "");
  $nval++;
 } 

 for(my $i=0;$i<@$rdes;$i++){
  next if($$rdes[$i] eq "");
  $$rdes[$i]{"l"} += $$rnod{"l"} if($nval==1);	# donate length to child
  distance_subtree_rec($$rdes[$i]);
 }
}

############################################################
#	short_subtree_rec($root)
############################################################
sub short_subtree_rec
{
 my $rnod = shift;
 my $rdes = $$rnod{"d"};

 my $nval = 0;
 my $rval = "";
 for(my $i=0;$i<@$rdes;$i++){
  next if($$rdes[$i] eq "");
  $rval = short_subtree_rec($$rdes[$i]);
  $$rdes[$i] = $rval;
  $nval++;
 }
 
 return $rval if($nval==1);		# one valid - return last
 
 return $rnod;				# none or many valid - return self
}

############################################################
#	make_unrooted($root)
############################################################
sub make_unrooted
{
 my $rnod = shift;
 my $rdes = $$rnod{"d"};

 count_bra_rec($rnod);
 	#print_tree($rnod,0);
 return if($$rnod{"cnt"}>2);		# not a bifurcation at root
 
 my $del = 0;				# collapse first?
 $del = 1 if($$rdes[$del]{"cnt"}<2);	# collapse second?
 return if($$rdes[$del]{"cnt"}<2);	# can't collapse?
 
 	#printf "Collapsing node #%d with %d descendants\n",$del,$$rdes[$del]{"cnt"};
 
 my $rcol = $$rdes[$del];
 my $rnoc = $$rcol{"d"};
 foreach my $rnxx (@$rnoc){ push @$rdes,$rnxx;}
 $$rdes[$del] = "";
	# parents, lengths and counts are screwed around the root.
}

############################################################
#	sort_tree($root);
############################################################
sub sort_tree
{
 my $rnod = shift;
 
 count_nod_rec($rnod);
 alpha_nod_rec($rnod);
 sort_nod_rec($rnod);
}

############################################################
#	count_nod_rec($rnod);
############################################################
sub count_nod_rec
{
 my $rnod = shift;
 my $rdes = $$rnod{"d"};
 
 if(@$rdes){				# internal node
  my $cnt = 0;
  for(my $i=0;$i<@$rdes;$i++){
   next unless($$rdes[$i]);
   $cnt += count_nod_rec($$rdes[$i]);
  }
  $$rnod{"cnt"} = $cnt;
 }else{					# terminal node
  $$rnod{"cnt"} = 1;
 }
 return $$rnod{"cnt"};
}

############################################################
#	alpha_nod_rec($rnod);
############################################################
sub alpha_nod_rec
{
 my $rnod = shift;
 my $rdes = $$rnod{"d"};
 
 if(@$rdes){				# internal node
  my $aln = "~~~";
  for(my $i=0;$i<@$rdes;$i++){
   my $alx = alpha_nod_rec($$rdes[$i]);
   $aln = $alx if($alx lt $aln);
  }
  $$rnod{"aln"} = $aln;
 }else{					# terminal node
  my $line = $$rnod{"n"};
  $line = (split/$delim/,$line)[$idwrd-1] if($idwrd>0);
  $$rnod{"aln"} = $line;
 }
 return $$rnod{"aln"};
}

############################################################
#	sort_nod_rec($rnod);
############################################################
sub sort_nod_rec
{
 my $rnod = shift;
 my $rdes = $$rnod{"d"};
 
 return unless(@$rdes);
 
 @$rdes = sort comp_nod @$rdes;
 
 for(my $i=0;$i<@$rdes;$i++){
  sort_nod_rec($$rdes[$i]);
 }
}

############################################################
#	comp_nod
############################################################
sub comp_nod
{
 my $na = $$a{"cnt"};
 my $nb = $$b{"cnt"};
 my $aa = $$a{"aln"};
 my $ab = $$b{"aln"};
 
 return $nb<=>$na unless($nb==$na);
 return ($aa cmp $ab);
}

############################################################
#	count_bra_rec($rnod);
############################################################
sub count_bra_rec
{
 my $rnod = shift;
 my $rdes = $$rnod{"d"};
 
 if(@$rdes){				# internal node
  my $cnt = 0;
  for(my $i=0;$i<@$rdes;$i++){
   next unless($$rdes[$i]);
   $cnt++;
   count_bra_rec($$rdes[$i]);
  }
  $$rnod{"cnt"} = $cnt;
 }else{					# terminal node
  $$rnod{"cnt"} = 1;
 }
 return $$rnod{"cnt"};
}

#***********************************************************
#	Basic tree reading/handling
#***********************************************************

#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#	Basic Fields
# n	node name (must be defined at leaves) [string]
# d	list of descendants [reference to array of references]
# p	parent [reference]
# l	in-branch length [real number]
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

############################################################
#	read_tree($name)
#	November 28 2013
############################################################
sub read_tree
{
 my $name = shift;
 my $line = "";
 
 open HAND,"<$name" or die "Can't read \"$name\"";
 while(<HAND>){
  chomp;
  $line .= $_;
 }
 close HAND;
 
 $line =~ s/^[^(]*//;	# clean leader
 $line =~ s/;.*$//;	# clean trailer
 $line =~ tr/ //d;	# clean spaces
 $line =~ s/\)[^)]+$/\)/;		# clean terminal labels and branch length #@@# NB: temporary solution!

 my %tmp = ();
 my $rxxt = \%tmp;
 
 parse_tree($rxxt,$line);
 return $rxxt;
}

############################################################
#	parse_tree($rnod,$line)
#	April 04 2014
############################################################
sub parse_tree
{
 my $rnod = shift;
 my $ilin = shift;
 
 my $line = unwrap_line($ilin);		# strip (...)
 my @desc = split_line($line);		# parse descendants
 	#print "[ $line ]\n";
 	#for(my $i=0;$i<@desc;$i++){
 	# printf "\t[ %s ]\n",$desc[$i];
 	#}
 if(@desc==1){				# none - terminal node
  $$rnod{"n"} = $desc[0];
  return;
 }
 
 my @tmp = ();				# internal node - set up
 $$rnod{"d"} = \@tmp;			# an array of descendants
 my $rdes = $$rnod{"d"};
 
 for(my $i=0;$i<@desc;$i++){		# descendants - one by one...
  my %tmpn = ();
  push @$rdes,\%tmpn;				# record in parent
  #pure style
  #my ($trex,$lenn) = ($desc[$i] =~ m/^(.*):(\d+\.*\d*e*[-+]*\d*)$/);	# extract branch length
  #BEAST style
  	#printf "***%s***\n",$desc[$i];
  my ($trex,$lenx) = ($desc[$i] =~ m/^(.*):([^:]+)$/);			# before last ":", after
  $trex = $desc[$i] unless($trex ne "");			# no branch length
  	#printf "[%s|%s]\n",$trex,$lenx;
  my ($tren,$boot) = ($trex =~ m/^(\(.+\))([^)]+)$/);			# extract bootstrap or label
  $tren = $trex unless($tren ne "");					# no bootstrap or label
  my ($iadd,$lenn) = ($lenx =~ m/\[([^\]]+)\](\d+\.*\d*e*[-+]*\d*)/);	# extract info and branch length
  $lenn = $lenx unless($lenn ne "");					# no info
  $tmpn{"l"} = $lenn+$EPSILON*(0.5+rand()/2);	# record branch length
  $tmpn{"b"} = $boot;				# record bootstrap or label
  $tmpn{"i"} = $iadd;				# record additional info
  $tmpn{"p"} = $rnod;				# record parent node - just in case
  parse_tree(\%tmpn,$tren);			# go further down the tree
 }
}

############################################################
#	unwrap_line($line);
############################################################
sub unwrap_line
{
 my $line = shift;
 my $pbal = find_balance($line);
 if($pbal<0){ die "Unbalanced expression [$line]";}
 
 return $line if($pbal+1<length $line);		# not wrapped
 $line =~ s/^\s*\(//;
 $line =~ s/\)\s*$//;
 return $line;
}

############################################################
#	split_line($line);
############################################################
sub split_line
{
 my $line = shift;
 my @lout = ();
 while(length $line){
  my $pbal = find_balance($line);
  if($pbal<0){ die "Unbalanced expression [$line]";}
  push @lout,(substr $line,0,$pbal);	# left part
  $line = substr $line,$pbal+1;		# right part
 }
 return @lout;
}

############################################################
#	find_balance($line);
############################################################
sub find_balance
{
 my $line = shift;
 my $bal = 0;my $pos = 0;
 while($line=~m/(.)/g){
  if($1 eq ","){
   last if($bal==0);
  }elsif($1 eq "("){
   $bal++;
  }elsif($1 eq ")"){
   $bal--;
  }
  return -1 if($bal<0);		# -1 - unbalanced
  $pos++;
 }
 return -1 if($bal>0);		# -1 - unbalanced
 return $pos;
}

############################################################
#	write_tree($root,$name,$flag)
#	0x01	- processed names
#	0x02	- include lengths
#	0x04	- include bootstraps
#	December 19 2011
############################################################
sub write_tree
{
 my $rroo = shift;
 my $name = shift;
 my $flag = shift;
 
 my $line = write_tree_rec($rroo,$flag);
 open HANX,">$name" or die "Can't write \"$name\"";
 print HANX "$line;\n";
 close HANX;
}

############################################################
#	write_tree_rec($root,$flag)
#	December 19 2011
############################################################
sub write_tree_rec
{
 my $rnod = shift;
 my $flag = shift;
 my $rdes = $$rnod{"d"};
 my $line = "";
 
 unless(@$rdes){			# terminal node
  $line = $$rnod{"n"};
  $line = (split/$delim/,$line)[$idwrd-1] if($idwrd>0 and $flag&0x01);
  return $line;
 }

 for(my $i=0;$i<@$rdes;$i++){
  next if($$rdes[$i] eq "");
  $line .= "," if($line ne "");
  $line .= write_tree_rec($$rdes[$i],$flag);
  $line .= $$rdes[$i]{"b"} if($$rdes[$i]{"b"} ne "" and $flag&0x04);
  $line .= ":".$$rdes[$i]{"l"} if($$rdes[$i]{"l"} ne "" and $flag&0x02);
 }
 $line = "(".$line.")";
 return $line;
}

############################################################
#	print_tree($rnod,$level)
############################################################
# not used - debugging procedure
sub print_tree
{
 my $rnod = shift;
 my $level = shift;
 
 my $blen = $$rnod{"l"};
 my $name = $$rnod{"n"};
 my $rdes = $$rnod{"d"};
 if($name ne ""){
  for(my $i=0;$i<$level;$i++){ print "\t";} print "$name\n";
 }else{
  for(my $i=0;$i<$level;$i++){ print "\t";} print "INTERNAL\n";
 }
 for(my $i=0;$i<$level;$i++){ print "\t";} printf "L= %.4f\n",$blen;
# for(my $i=0;$i<$level;$i++){ print "\t";} printf "N= %d\n",$$rnod{"cnt"};
# for(my $i=0;$i<$level;$i++){ print "\t";} printf "A= %s\n",$$rnod{"aln"};
 for(my $i=0;$i<$level;$i++){ print "\t";} printf "Y= %d\n",$$rnod{"Y"};
 	#for(my $i=0;$i<$level;$i++){ print "\t";} printf "SL= %s\n",$rrsl;
 	#for(my $i=0;$i<$level;$i++){ print "\t";} printf "SR= %s\n",$rrsr;
 
 for(my $i=0;$i<@$rdes;$i++){ print_tree($$rdes[$i],$level+1) if($$rdes[$i] ne "");}
}

#***********************************************************
#	Dusty attic
#***********************************************************

############################################################
#	process_names($root)
############################################################
# not used?
sub process_names
{
 my $rnod = shift;
 
 my $rnol = $$rnod{"sl"};
 my $rnor = $$rnod{"sr"};
 my $name = $$rnod{"n"};

 if($rnol ne "" and $rnor ne ""){	# internal
  process_names($rnol);
  process_names($rnor);
 }
 
 if($name ne ""){			# has name
  my $id = (split/$delim/,$name)[$idwrd-1] if($idwrd>0);
  $$rnod{"n"} = $id;
 }
}

############################################################
#	print_subset($rnod,$flag)
#	0x01	- node height
#	0x02	- parent height
############################################################
# not used?
sub print_subset
{
 my $rnod = shift;
 my $flag = shift;
 
 my $name = $$rnod{"n"};
 my $rrsl = $$rnod{"sl"};
 my $rrsr = $$rnod{"sr"};
 if($rrsl ne "" and $rrsr ne ""){
  print_subset($rrsl,$flag);
  print_subset($rrsr,$flag);
 }else{
  printf "%.5f\t",$$rnod{"h"} if($flag & 0x01);
  printf "%.5f\t",$$rnod{"h"}-$$rnod{"l"} if($flag & 0x02);
  print "$name\n";
 }
}

############################################################
#	list_subset($rnod,\@node)
############################################################
# not used?
sub list_subset
{
 my $rnod = shift;
 my $rlst = shift;
 
 my $rrsl = $$rnod{"sl"};
 my $rrsr = $$rnod{"sr"};
 if($rrsl ne "" and $rrsr ne ""){
  list_subset($rrsl,$rlst);
  list_subset($rrsr,$rlst);
 }else{
  my $name = $$rnod{"n"};
  push @$rlst,$name;
 }
}

############################################################
#	copy_tree($root)
############################################################
# not used?
sub copy_tree
{
 my $rroo = shift;
 
 my %croo = %$rroo;
 
 copy_tree_rec($rroo,\%croo);
 return \%croo;
}

############################################################
#	copy_tree_rec($rnod,$rcop)
############################################################
# not used?
sub copy_tree_rec
{
 my $rnod = shift;
 my $rcop = shift;

 my $rnol = $$rnod{"sl"}; 
 my $rnor = $$rnod{"sr"}; 
 if($rnol ne "" and $rnor ne ""){	# internal node
  my %copl = %$rnol;
  $copl{"p"} = $rcop;
  $rcop{"sl"} = \%copl;
  copy_tree_rec($rnol,\%copl);
  my %copr = %$rnor;
  $copr{"p"} = $rcop;
  $rcop{"sr"} = \%copr;
  copy_tree_rec($rnor,\%copr);
 }
}

############################################################
#	max min
############################################################
sub max
{
 my $max = shift;
 while(@_){
  my $x = shift;
  $max = $x if($x>$max);
 }
 return $max;
}

sub min
{
 my $min = shift;
 while(@_){
  my $x = shift;
  $min = $x if($x<$min);
 }
 return $min;
}


############################################################
#	my_args
############################################################
sub my_args
{
 my $nop = scalar @_;
 for($i=0;$i<$nop;$i++){
  if($_[$i]=~m/^-[^=]+=$/){
   my $new = $_[$i].$_[$i+1];
   splice @_,$i,2,$new;
  }
 }
 foreach my $arg (@_){
  my ($opt) = ($arg =~ m/^-(\w+)/);
  my ($val) = ($arg =~ m/^-\w+=(.*)/);
  if($opt){
   $myOptList{$opt} = $val;
  }else{
   push @myGlobList,$arg;
  }
 }
}
