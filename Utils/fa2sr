#!/usr/bin/perl5.16

############################################################
#	Template:	1.1, August 17, 2015
#	Parent Path:	/home/wolf/bin on frosty
############################################################

############################################################
#	System etc
############################################################
use lib "/home/wolf/perl5/lib/perl5";
use YIW::basic;

our $Pver = "0.1";
our $Pdat = "Xxx 00 2015";

our ($Pnam) = ($0 =~ m/([^\/]+)$/);
our ($Path) = ($0 =~ m/^(.+)\/[^\/]+$/);$Path = "." unless($Path);

our $Ppid = $$;	# Process ID
our $Base = "tmp.$Pnam.$Ppid";
our $CMD = "";
############################################################
#	Definitions
############################################################
$idpad = 0;
$idwrd = 2;
$delim = "[ ,;:|]";

############################################################
#	Global variables
############################################################

############################################################
#	Instructions etc
############################################################
$Instructions = <<EOINPUT;

$Path/$Pnam $Pver, $Pdat

Use: $Pnam name [options]

FASTA to seqrows.

Options:

	-i=n		pad IDs by spaces to length n (<0 to truncate)

	-w=n		use n-th word of ID (default $idwrd; 0 - all)
EOINPUT

############################################################
#	code start
############################################################

#---	get and process arguments --------------------------
YIW::basic::my_args(\@ARGV,1);					# pass 0 to block STDIN
!@myGlobList and print $Instructions and exit 0;

# examples for using options:
# $opts = 1 if(exists $myOptList{"q"});				# on/off
# $opti = int $myOptList{"i"} if(int $myOptList{"i"}>0);	# positive integer
# $opti = $myOptList{"x"} + 0 if($myOptList{"x"}>0);		# positive real
# $optl = $myOptList{"l"} if($myOptList{"l"} ne "");		# non-empty string
$idpad = int $myOptList{"i"} if(int $myOptList{"i"}!=0);
$idwrd = int $myOptList{"w"} if(exists $myOptList{"w"});

# my $name = shift @myGlobList;

#---	rest of the code -----------------------------------
# $CMD = ""; print STDERR "$Pnam:\t[ $CMD ]\n"; system $CMD;
#
# print STDERR "$Pnam:\tReading $dlst/$core.$clst\n";
# open HAND,"<$dlst/$core.$clst" or die "$Pnam:\tCan't read \"$dlst/$core.$clst\"";
# while(<HAND>){
#  chomp;
# }
# close HAND;

#---	read and process -----------------------------------
foreach my $name (@myGlobList){
 foreach my $ff (glob $name){
  my $def = ""; my $seq = "";
  open HAND,"<$ff" or die "Can't read \"$ff\"";
  while(<HAND>){
   chomp;
   if(m/^>/){
    process_sequence(\$seq,\$def) if($seq ne "" and $def ne "");
    $def = substr $_,1;
    $seq = "";
    next;
   }
   $seq .= $_;
  }
  close HAND;
  process_sequence(\$seq,\$def) if($seq ne "" and $def ne "");
 }
}

############################################################
#	process_sequence($rseq,$rdef)
############################################################
sub process_sequence
{
 my $rseq = shift;
 my $rdef = shift;

 $$rseq =~ tr/ \t//d;

 my ($id) = split/\s+/,$$rdef;
 $id = (split/$delim/,$id)[$idwrd-1] if($idwrd>0);

 if($idpad<0){
  $id = substr $id,0,-$idpad;
  printf "%s\t%s\n",$id,$$rseq;
 }elsif($idpad>0){
  while((length $id)<$idpad){ $id .= " ";}
  printf "%s %s\n",$id,$$rseq;
 }else{
  printf "%s\t%s\n",$id,$$rseq;
 }
}
